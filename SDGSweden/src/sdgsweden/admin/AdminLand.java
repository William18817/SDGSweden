/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package sdgsweden.admin;

import java.util.ArrayList;
import java.util.HashMap;
import oru.inf.InfDB;
import sdgsweden.MainFrame;
import sdgsweden.Validering;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oru.inf.InfException;

/**
 *
 * @author User
 */
public class AdminLand extends javax.swing.JPanel {

    private MainFrame parent;
    private InfDB idb;
    String aid;
    
    /**
     * Creates new form AdminLand
     */
    public AdminLand(MainFrame parent,InfDB idb, String aid) {
            this.parent = parent;
            this.idb = idb;
            this.aid = aid;
            
        initComponents();
        fyllLandITabell();
        
        //Den här raden lägger till en "Lyssnare" till tabellen "Avdelningar".
        //Varje gång användaren markerar en avdelnings så körs koden inuti "e -> {...}"
        jTableLand.getSelectionModel().addListSelectionListener(e -> {
            
            //Detta är en if-sats som kontrollerar att koden bara körs när användaren har avslutat sin radmarkering.
            if (!e.getValueIsAdjusting()) {
                
                //Här hämtas radnummer för den rad som användaren klickat på.
                //rad är av datatypen "int" vilket innebär att resultatet visar siffor.
                int rad = jTableLand.getSelectedRow();
                
                //Om en rad inte är vald kommer kommer "-1" att "visas". Om en rad är ifylld som kommer koden här nedan att visas i textfälten.
                if (rad != -1) {
                
                //Dessa kodrader hämtar värden från varje kolumn i "jTableAvdelning". 
                //Den informationen visas sen i respektive textält till höger, exempelvis "txtAdress" - textfältet.   
                txtNamn.setText(jTableLand.getValueAt(rad,1).toString());
                txtSpråk.setText(jTableLand.getValueAt(rad,2).toString());
                txtValuta.setText(jTableLand.getValueAt(rad,3).toString());
                txtTidszon.setText(jTableLand.getValueAt(rad,4).toString());
                txtPolitiskStruktur.setText(jTableLand.getValueAt(rad,5).toString());
                txtEkonomi.setText(jTableLand.getValueAt(rad,6).toString());
                }
                }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnTillbakaAdmin = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableLand = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtNamn = new javax.swing.JTextField();
        txtSpråk = new javax.swing.JTextField();
        txtValuta = new javax.swing.JTextField();
        txtTidszon = new javax.swing.JTextField();
        txtPolitiskStruktur = new javax.swing.JTextField();
        txtEkonomi = new javax.swing.JTextField();
        btnSpara = new javax.swing.JButton();
        btnLaggTill = new javax.swing.JButton();
        btnTaBort = new javax.swing.JButton();

        jLabel1.setText("Land");

        btnTillbakaAdmin.setText("Tillbaka");
        btnTillbakaAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTillbakaAdminActionPerformed(evt);
            }
        });

        jTableLand.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(jTableLand);
        jTableLand.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel2.setText("Namn");

        jLabel3.setText("Språk");

        jLabel4.setText("Valuta");

        jLabel5.setText("Tidszon");

        jLabel6.setText("Politisk struktur");

        jLabel7.setText("Ekonomi");

        txtNamn.setPreferredSize(new java.awt.Dimension(180, 24));

        txtSpråk.setPreferredSize(new java.awt.Dimension(180, 24));

        txtValuta.setPreferredSize(new java.awt.Dimension(180, 24));

        txtTidszon.setPreferredSize(new java.awt.Dimension(180, 24));

        txtPolitiskStruktur.setPreferredSize(new java.awt.Dimension(180, 24));

        txtEkonomi.setPreferredSize(new java.awt.Dimension(180, 24));

        btnSpara.setText("Spara");
        btnSpara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSparaActionPerformed(evt);
            }
        });

        btnLaggTill.setText("Lägg till");
        btnLaggTill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaggTillActionPerformed(evt);
            }
        });

        btnTaBort.setText("Ta bort");
        btnTaBort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaBortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addGap(89, 89, 89)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSpråk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtValuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtTidszon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPolitiskStruktur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEkonomi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSpara)
                                .addGap(15, 15, 15)
                                .addComponent(btnLaggTill)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnTaBort)))
                        .addGap(0, 27, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnTillbakaAdmin)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSpråk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtValuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTidszon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPolitiskStruktur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEkonomi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSpara)
                    .addComponent(btnLaggTill)
                    .addComponent(btnTaBort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 154, Short.MAX_VALUE)
                .addComponent(btnTillbakaAdmin)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fyllLandITabell()
    {
    try {
            String sqlFraga = "SELECT * FROM land";
            ArrayList<HashMap<String, String>> resultat = idb.fetchRows(sqlFraga);

            String[] kolumner = {"lid", "namn", "sprak", "valuta", "tidszon", "politisk_struktur", "ekonomi"};
            DefaultTableModel modell = new DefaultTableModel();

            for (String kolumn : kolumner) {
                modell.addColumn(kolumn);
            }

            for (HashMap<String, String> rad : resultat) {
                String[] radensVarden = new String[kolumner.length];
                for (int i = 0; i < kolumner.length; i++) {
                    radensVarden[i] = rad.get(kolumner[i]);
                }
                modell.addRow(radensVarden);
            }

            jTableLand.setModel(modell);
        } catch (Exception ettFel) {
            JOptionPane.showMessageDialog(this, "Kunde inte visa land.");
            ettFel.printStackTrace();
        }
    }

    private void btnTillbakaAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTillbakaAdminActionPerformed
        AdminPanel adminPanel = new AdminPanel (parent, idb, aid);
        parent.visaPanel(adminPanel, "adminPanel");
    }//GEN-LAST:event_btnTillbakaAdminActionPerformed

    private void btnSparaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSparaActionPerformed
        
        // Läs in alla värden från textfälten
        String namn = txtNamn.getText().trim();
        String sprak = txtSpråk.getText().trim();
        String valuta = txtValuta.getText().trim();
        String tidszon = txtTidszon.getText().trim();
        String politiskStruktur = txtPolitiskStruktur.getText().trim();
        String ekonomi = txtEkonomi.getText().trim();
        
        if (Validering.isEmpty(txtNamn.getText()))
        {
           JOptionPane.showMessageDialog(this, "Namn får inte vara tomt.");
           return;
        }
        if (Validering.isEmpty(txtSpråk.getText()))
        {
            JOptionPane.showMessageDialog(this, "Språk får inte vara tomt.");
            return;
        }
        if (Validering.isEmpty(txtValuta.getText()))
        {
            JOptionPane.showMessageDialog(this, "Valuta får inte vara tomt.");
            return;
        }
        if (Validering.isEmpty(txtTidszon.getText()))
        {
            JOptionPane.showMessageDialog(this, "Tidszon får inte vara tomt.");
            return;
        }
        if (Validering.isEmpty(txtPolitiskStruktur.getText()))
        {
            JOptionPane.showMessageDialog(this, "Politisk struktur får inte vara tomt.");
            return;
        }
        if (Validering.isEmpty(txtEkonomi.getText()))
        {
            JOptionPane.showMessageDialog(this, "Ekonomi får inte vara tomt.");
            return;
        }
        
        // Kolla att en rad är vald i tabellen
int valdRad = jTableLand.getSelectedRow();

if (valdRad == -1) {
    
    JOptionPane.showMessageDialog(this, "Du måste klicka på en rad i tabellen först.");
    return;
}

try {
    // Hämta ID från vald rad
    String lid = jTableLand.getValueAt(valdRad, 0).toString();

    // Skapa SQL-fråga för att uppdatera
    String sqlFraga = "UPDATE land SET namn = '" + namn + "', sprak = '" + sprak + "', valuta = '" + valuta + "', tidszon = '" + tidszon + "', politisk_struktur = '" + politiskStruktur + "', ekonomi = '" + ekonomi + "' WHERE lid = " + lid;

    // Kör SQL-frågan
    idb.update(sqlFraga);

    // Visa meddelande
    JOptionPane.showMessageDialog(this, "Ändring sparad!");

    // Töm textfälten
    txtNamn.setText("");
    txtSpråk.setText("");
    txtValuta.setText("");
    txtTidszon.setText("");
    txtPolitiskStruktur.setText("");
    txtEkonomi.setText("");

    // Uppdatera tabellen
    fyllLandITabell();

} catch (Exception e) {
    JOptionPane.showMessageDialog(this, "Något gick fel: " + e.getMessage());
    e.printStackTrace();
}
    }//GEN-LAST:event_btnSparaActionPerformed

    private void btnLaggTillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaggTillActionPerformed
        try {
    // Hämta alla värden från formuläret
    String namn = txtNamn.getText().trim();
    String sprak = txtSpråk.getText().trim();
    String valuta = txtValuta.getText().trim();
    String tidszon = txtTidszon.getText().trim();
    String politiskStruktur = txtPolitiskStruktur.getText().trim();
    String ekonomi = txtEkonomi.getText().trim();

    // Validering
    if (Validering.isEmpty(txtNamn.getText())) {
        JOptionPane.showMessageDialog(this, "Namn får inte vara tomt.");
        return;
    }
    if (Validering.isEmpty(txtSpråk.getText())) {
        JOptionPane.showMessageDialog(this, "Språk får inte vara tomt.");
        return;
    }
    if (Validering.isEmpty(txtValuta.getText())) {
        JOptionPane.showMessageDialog(this, "Valuta får inte vara tomt.");
        return;
    }
    if (Validering.isEmpty(txtTidszon.getText())) {
        JOptionPane.showMessageDialog(this, "Tidszon får inte vara tomt.");
        return;
    }
    if (Validering.isEmpty(txtPolitiskStruktur.getText())) {
        JOptionPane.showMessageDialog(this, "Politisk struktur får inte vara tom.");
        return;
    }
    if (Validering.isEmpty(txtEkonomi.getText())) {
        JOptionPane.showMessageDialog(this, "Ekonomi får inte vara tom.");
        return;
    }

    // Hämta nästa lediga lid
    String sqlNextId = "SELECT MAX(lid) FROM land";
    String nextIdStr = idb.fetchSingle(sqlNextId);
    int nextLid = 1; // starta på 1
    if (nextIdStr != null && !nextIdStr.isEmpty()) {
        nextLid = Integer.parseInt(nextIdStr) + 1;
    }

    // Skapa SQL-fråga
    String sql = "INSERT INTO land (lid, namn, sprak, valuta, tidszon, politisk_struktur, ekonomi) " + "VALUES (" + nextLid + ", '" + namn + "', '" + sprak + "', '" + valuta + "', '" + tidszon + "', '" + politiskStruktur + "', '" + ekonomi + "')";

    // Kör INSERT
    idb.insert(sql);

    JOptionPane.showMessageDialog(this, "Land har lagts till i systemet!");

    // Rensa fält
    txtNamn.setText("");
    txtSpråk.setText("");
    txtValuta.setText("");
    txtTidszon.setText("");
    txtPolitiskStruktur.setText("");
    txtEkonomi.setText("");
    
        } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Fel: " + e.getMessage());
        e.printStackTrace();
        }
        fyllLandITabell();
    }//GEN-LAST:event_btnLaggTillActionPerformed

    private void btnTaBortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaBortActionPerformed
        try
        {
    // Detta visar en popup-ruta där man får ange land-ID
    String landId = JOptionPane.showInputDialog(this, "Ange land-ID (lid) för att ta bort:");

    // Om man inte fyller i rutan med ett giltigt lid
    if (landId == null || landId.isEmpty())
    {
        JOptionPane.showMessageDialog(this, "Fyll i ett land-ID först.");
        return;
    }

    // Hämta specifik information om landet
    String sql = "SELECT namn FROM land WHERE lid = " + landId;

    // Kör SQL-frågan
    ArrayList<HashMap<String, String>> landLista = idb.fetchRows(sql);

    // Om inget land hittas
    if (landLista == null || landLista.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Det finns inget land med detta ID.");
        return;
    }

    // Lista namn (även om det bara är ett)
    String[] landNamnLista = new String[landLista.size()];
    for (int i = 0; i < landLista.size(); i++) {
        landNamnLista[i] = landLista.get(i).get("namn");
    }

    // Dialog för att bekräfta borttagning
    String valtLand = (String) JOptionPane.showInputDialog(
        this, "Bekräfta vilket land du vill ta bort:", "Ta bort land",
        JOptionPane.QUESTION_MESSAGE,
        null,
        landNamnLista,
        landNamnLista[0]
    );

    if (valtLand != null) {
        for (HashMap<String, String> l : landLista) {
            String namn = l.get("namn");
            if (namn.equals(valtLand)) {
                String deleteSql = "DELETE FROM land WHERE lid = " + landId;
                idb.delete(deleteSql);
                JOptionPane.showMessageDialog(this, "Landet togs bort.");
                fyllLandITabell();
                break;
            }
        }
    }
} catch (InfException e) {
    JOptionPane.showMessageDialog(this, "Fel vid borttagning av land: " + e.getMessage());
}
    }//GEN-LAST:event_btnTaBortActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLaggTill;
    private javax.swing.JButton btnSpara;
    private javax.swing.JButton btnTaBort;
    private javax.swing.JButton btnTillbakaAdmin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableLand;
    private javax.swing.JTextField txtEkonomi;
    private javax.swing.JTextField txtNamn;
    private javax.swing.JTextField txtPolitiskStruktur;
    private javax.swing.JTextField txtSpråk;
    private javax.swing.JTextField txtTidszon;
    private javax.swing.JTextField txtValuta;
    // End of variables declaration//GEN-END:variables
}
