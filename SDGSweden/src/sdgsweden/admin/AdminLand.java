/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package sdgsweden.admin;

import java.util.ArrayList;
import java.util.HashMap;
import oru.inf.InfDB;
import sdgsweden.MainFrame;
import sdgsweden.Validering;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oru.inf.InfException;

/**
 *
 * @author User
 */
public class AdminLand extends javax.swing.JPanel {

    private MainFrame parent;
    private InfDB idb;
    String aid;
    
    /**
     * Creates new form AdminLand
     */
    public AdminLand(MainFrame parent,InfDB idb, String aid) {
            this.parent = parent;
            this.idb = idb;
            this.aid = aid;
            
        initComponents();
        fyllLandITabell();
        
        //Den här raden lägger till en "Lyssnare" till tabellen "Avdelningar".
        //Varje gång användaren markerar en avdelnings så körs koden inuti "e -> {...}"
        //Det som händer är att så fort man klickar sig in på sidan så syns information om Länder.
        jTableLand.getSelectionModel().addListSelectionListener(e -> {
            
            //Detta är en if-sats som kontrollerar att koden bara körs när användaren har avslutat sin radmarkering (Alltså när man klickat på landet och släppt musknappen).
            if (!e.getValueIsAdjusting()) {
                
                //Här hämtas radnummer för den rad som användaren klickat på.
                //rad är av datatypen "int" vilket innebär att resultatet visar siffor.
                int rad = jTableLand.getSelectedRow();
                
                //Om en rad inte är vald kommer kommer "-1" att "visas". Om en rad är ifylld som kommer koden här nedan att visas i textfälten.
                if (rad != -1) {
                
                //Dessa kodrader hämtar värden från varje kolumn i "jTableAvdelning". 
                //Den informationen visas sen i respektive textält till höger, exempelvis "txtAdress" - textfältet.   
                txtNamn.setText(jTableLand.getValueAt(rad,1).toString());
                txtSpråk.setText(jTableLand.getValueAt(rad,2).toString());
                txtValuta.setText(jTableLand.getValueAt(rad,3).toString());
                txtTidszon.setText(jTableLand.getValueAt(rad,4).toString());
                txtPolitiskStruktur.setText(jTableLand.getValueAt(rad,5).toString());
                txtEkonomi.setText(jTableLand.getValueAt(rad,6).toString());
                }
                }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelLand = new javax.swing.JLabel();
        btnTillbakaAdmin = new javax.swing.JButton();
        jScrollPanelLand = new javax.swing.JScrollPane();
        jTableLand = new javax.swing.JTable();
        jLabelNamn = new javax.swing.JLabel();
        jLabelSprak = new javax.swing.JLabel();
        jLabelValuta = new javax.swing.JLabel();
        jLabelTidszon = new javax.swing.JLabel();
        jLabelPolitiskStruktur = new javax.swing.JLabel();
        jLabelEkonomi = new javax.swing.JLabel();
        txtNamn = new javax.swing.JTextField();
        txtSpråk = new javax.swing.JTextField();
        txtValuta = new javax.swing.JTextField();
        txtTidszon = new javax.swing.JTextField();
        txtPolitiskStruktur = new javax.swing.JTextField();
        txtEkonomi = new javax.swing.JTextField();
        btnSpara = new javax.swing.JButton();
        btnLaggTill = new javax.swing.JButton();
        btnTaBort = new javax.swing.JButton();
        LbKosmetiskt = new javax.swing.JLabel();

        jLabelLand.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabelLand.setText("Land");

        btnTillbakaAdmin.setText("Tillbaka");
        btnTillbakaAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTillbakaAdminActionPerformed(evt);
            }
        });

        jTableLand.setColumnSelectionAllowed(true);
        jScrollPanelLand.setViewportView(jTableLand);
        jTableLand.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabelNamn.setText("Namn");

        jLabelSprak.setText("Språk");

        jLabelValuta.setText("Valuta");

        jLabelTidszon.setText("Tidszon");

        jLabelPolitiskStruktur.setText("Politisk struktur");

        jLabelEkonomi.setText("Ekonomi");

        txtNamn.setPreferredSize(new java.awt.Dimension(180, 24));

        txtSpråk.setPreferredSize(new java.awt.Dimension(180, 24));

        txtValuta.setPreferredSize(new java.awt.Dimension(180, 24));

        txtTidszon.setPreferredSize(new java.awt.Dimension(180, 24));

        txtPolitiskStruktur.setPreferredSize(new java.awt.Dimension(180, 24));

        txtEkonomi.setPreferredSize(new java.awt.Dimension(180, 24));

        btnSpara.setText("Spara");
        btnSpara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSparaActionPerformed(evt);
            }
        });

        btnLaggTill.setText("Lägg till");
        btnLaggTill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaggTillActionPerformed(evt);
            }
        });

        btnTaBort.setText("Ta bort");
        btnTaBort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaBortActionPerformed(evt);
            }
        });

        LbKosmetiskt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sdgsweden/bilder/global-goals-logo-lite-större.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelLand))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPanelLand, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(btnSpara)
                                .addGap(15, 15, 15)
                                .addComponent(btnLaggTill)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnTaBort)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnTillbakaAdmin)))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTidszon)
                            .addComponent(jLabelValuta)
                            .addComponent(jLabelSprak)
                            .addComponent(jLabelNamn)
                            .addComponent(jLabelPolitiskStruktur)
                            .addComponent(jLabelEkonomi))
                        .addGap(89, 89, 89)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSpråk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtValuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTidszon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPolitiskStruktur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEkonomi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LbKosmetiskt)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabelLand)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPanelLand, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSpara)
                            .addComponent(btnLaggTill)
                            .addComponent(btnTaBort)
                            .addComponent(btnTillbakaAdmin)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNamn)
                            .addComponent(txtNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSpråk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSprak))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtValuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelValuta))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTidszon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTidszon))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPolitiskStruktur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelPolitiskStruktur))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEkonomi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelEkonomi))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LbKosmetiskt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fyllLandITabell()
    {
    
    //Detta är början på en try-catch sats där all kod mellan try och catch nu kommer testköras.
    try {
        
            //Detta är en vanlig sql-fråga där vi vill hämta all information från land.
            String sqlFraga = "SELECT * FROM land";
            
            //Detta är olika importer i form av arraylist och hashmaps.
            //Här körs även frågan.
            ArrayList<HashMap<String, String>> resultat = idb.fetchRows(sqlFraga);

            //Här skapas en array med namn "kolumner" som innehåller informationen nedan.
            String[] kolumner = {"lid", "namn", "sprak", "valuta", "tidszon", "politisk_struktur", "ekonomi"};
            
            //Här skapas en tom modell som sedan kommer att fyllas i med data.
            DefaultTableModel modell = new DefaultTableModel();

            //Detta är en for-each loop som går igenom varje kolumn i arrayen "kolumner" sedan läggs en kolumn till genom "add".
            for (String kolumn: kolumner) {
                modell.addColumn(kolumn);
            }

            //Detta är en for-each loop som går igenom varje rad som hämtats från databasen.
            for (HashMap<String, String> rad: resultat) {
                
                //Här skapas en array med samma längd som antalet kolumner som finns.
                String[] radensVarden = new String[kolumner.length];
                
                //Detta är en for-loop som går igenom varje kolumn och hämtar värdet från hashmapen.
                for (int i = 0; i < kolumner.length; i++) {
                    
                    //Här hämtar vi värdet på en specifik rad.
                    radensVarden[i] = rad.get(kolumner[i]);
                }
                
                //Här lägger vi till den färdiga raden med dess värden i tabellen.
                modell.addRow(radensVarden);
            }

            //Detta görs att datan kommer visas i GUI-tabellen.
            jTableLand.setModel(modell);
            
          //Här är slutet på try-catch satsen och här fångas det eventuella problem.
        } catch (Exception ettFel) {
            
            //Detta är det felmeddelandet som visas ifall ett fel fångas i "catch".
            JOptionPane.showMessageDialog(this, "Kunde inte visa land.");
            
            //Detta gör att felmeddelandet skrivs ut i terminalen.
            ettFel.printStackTrace();
        }
    }

    private void btnTillbakaAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTillbakaAdminActionPerformed
       
        //Här skapas ett nytt objekt av "AdminPanel" i form av att ett nytt GUI-panel_fönster dyker upp.
        //Den får med sig tre saker från konstruktorn i form av "Parent (MainFrame), idb (databaskopplingen) och aid (användarens id).
        AdminPanel adminPanel = new AdminPanel (parent, idb, aid);
        
        //Detta är ett metodanrop vars syfte är att visa "adminPanel".
        parent.visaPanel(adminPanel, "adminPanel");
    }//GEN-LAST:event_btnTillbakaAdminActionPerformed

    private void btnSparaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSparaActionPerformed
        
        //Här blir alla fält inlästa och "trim()" kontrollerar och tar bort mellanslag i kodraden.
        String namn = txtNamn.getText().trim();
        String sprak = txtSpråk.getText().trim();
        String valuta = txtValuta.getText().trim();
        String tidszon = txtTidszon.getText().trim();
        String politiskStruktur = txtPolitiskStruktur.getText().trim();
        String ekonomi = txtEkonomi.getText().trim();
        
        //Dessa "if;s" nedan är en validering där det ställs olika krav på de attibut som står angivna.
        //Exempelvis om man anger fel format på e-post så får man felmeddelandet "Ogitlig E-postadress".
        //Allt detta är sedan kopplat till en egen valideringsklass som importers (Se högst upp).
        if (Validering.isEmpty(txtNamn.getText()))
        {
           JOptionPane.showMessageDialog(this, "Namn får inte vara tomt.");
           return;
        }
        if (Validering.isEmpty(txtSpråk.getText()))
        {
            JOptionPane.showMessageDialog(this, "Språk får inte vara tomt.");
            return;
        }
        if (!Validering.isValidValuta(txtValuta.getText()))
        {
            JOptionPane.showMessageDialog(this, "Valuta får inte vara tomt. Måste skrivas ex: 00.00");
            return;
        }
        if (Validering.isEmpty(txtTidszon.getText()))
        {
            JOptionPane.showMessageDialog(this, "Tidszon får inte vara tomt.");
            return;
        }
        if (Validering.isEmpty(txtPolitiskStruktur.getText()))
        {
            JOptionPane.showMessageDialog(this, "Politisk struktur får inte vara tomt.");
            return;
        }
        if (Validering.isEmpty(txtEkonomi.getText()))
        {
            JOptionPane.showMessageDialog(this, "Ekonomi får inte vara tomt.");
            return;
        }
        
        //Detta hämtar den rad som är markerad i tabellen "jTableAvdelningar".
        int valdRad = jTableLand.getSelectedRow();
        
        //Om inget är valt, alltså om -1 returneras...
        if (valdRad == -1) {
            
            //... så visas detta meddelande.
            JOptionPane.showMessageDialog(this, "Du måste klicka på en rad i tabellen först.");
            return;
        }
        
        //Början på en try-catch sats.
        try {
    
    //Här hämtar vi lid från kolumn 0 på vald rad.
    String lid = jTableLand.getValueAt(valdRad, 0).toString();

    //Här skapas en sql-fråga (sqlFraga) som uppdaterar informationen i databasen för specifikt valt lid.
    String sqlFraga = "UPDATE land SET namn = '" + namn + "', sprak = '" + sprak + "', valuta = '" + valuta + "', tidszon = '" + tidszon + "', politisk_struktur = '" + politiskStruktur + "', ekonomi = '" + ekonomi + "' WHERE lid = " + lid;

    //Här körs frågan så att uppdateringen implementeras i databasen.
    idb.update(sqlFraga);

    //Här visas ett meddelande om hur uppdateringen gick.
    JOptionPane.showMessageDialog(this, "Ändring sparad!");

    //Dessa kodrader tömmer varje textfält efter att ädnringen har skett för att underlätta inför nästa gång man ska skriva in något.
    txtNamn.setText("");
    txtSpråk.setText("");
    txtValuta.setText("");
    txtTidszon.setText("");
    txtPolitiskStruktur.setText("");
    txtEkonomi.setText("");

    //Här sker ett internt metodanrop för att hämta den nya datan.
    fyllLandITabell();

  //Detta är slutet på try-catch satsen. Om något går fel så fångar catch det här.
} catch (Exception ettFel) {
    
    //Följande meddelande skrivs ut vid fel.
    JOptionPane.showMessageDialog(this, "Något gick fel: " + ettFel.getMessage());
    
    //printStackTrace skriver ut felet i terminalen för att kunna felsöka.
    ettFel.printStackTrace();
}
    }//GEN-LAST:event_btnSparaActionPerformed

    private void btnLaggTillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaggTillActionPerformed
        
        //Början på en try-catch sats. All kod mellan try och catch kommer nu att testköras.
        try {
            
    //Här hämtas alla värden från textfälten där "trim()" tar bort mellanslag i varje kodrad.
    String namn = txtNamn.getText().trim();
    String sprak = txtSpråk.getText().trim();
    String valuta = txtValuta.getText().trim();
    String tidszon = txtTidszon.getText().trim();
    String politiskStruktur = txtPolitiskStruktur.getText().trim();
    String ekonomi = txtEkonomi.getText().trim();

    //Dessa "if;s" nedan är en validering där det ställs olika krav på de attibut som står angivna.
    //Exempelvis om man inte anger namn så får man felmeddelandet "Namn får inte vara tomt".
    //Allt detta är sedan kopplat till en egen valideringsklass som importers (Se högst upp).
    if (Validering.isEmpty(txtNamn.getText())) {
        JOptionPane.showMessageDialog(this, "Namn får inte vara tomt.");
        return;
    }
    if (Validering.isEmpty(txtSpråk.getText())) {
        JOptionPane.showMessageDialog(this, "Språk får inte vara tomt.");
        return;
    }
    if (!Validering.isValidValuta(txtValuta.getText())) {
        JOptionPane.showMessageDialog(this, "Valuta får inte vara tomt. Måste skrivas ex: 00.00 ");
        return;
    }
    if (Validering.isEmpty(txtTidszon.getText())) {
        JOptionPane.showMessageDialog(this, "Tidszon får inte vara tomt.");
        return;
    }
    if (Validering.isEmpty(txtPolitiskStruktur.getText())) {
        JOptionPane.showMessageDialog(this, "Politisk struktur får inte vara tom.");
        return;
    }
    if (Validering.isEmpty(txtEkonomi.getText())) {
        JOptionPane.showMessageDialog(this, "Ekonomi får inte vara tom.");
        return;
    }

    //Här hämtar vi den högsta id-numret som existerar i databasen för att kunna veta vilket id som det nya landet ska få.
    String sqlNextId = "SELECT MAX(lid) FROM land";
    String nextIdStr = idb.fetchSingle(sqlNextId);
    
    //Vi börjar alltid på 1.
    //Om det redan finns länder med det id:t så ökar vi med + 1 tills vi hittar ett tomt.
    int nextLid = 1;
    if (nextIdStr != null && !nextIdStr.isEmpty()) {
        nextLid = Integer.parseInt(nextIdStr) + 1;
    }

    //Här skapar vi en sql-fråga som lägger till ett nytt land och dess värden i databasen genom INSERT INTO land.
    String sqlFraga = "INSERT INTO land (lid, namn, sprak, valuta, tidszon, politisk_struktur, ekonomi) " + "VALUES (" + nextLid + ", '" + namn + "', '" + sprak + "', '" + valuta + "', '" + tidszon + "', '" + politiskStruktur + "', '" + ekonomi + "')";

    //Här kör vi sql-frågan.
    idb.insert(sqlFraga);

    //Detta är ett meddelande som syns ifall land har lagts till i databasen.
    JOptionPane.showMessageDialog(this, "Land har lagts till i systemet!");

    //Dessa kodrader tömmer varje textfält efter att ädnringen har skett för att underlätta inför nästa gång man ska skriva in något.
    txtNamn.setText("");
    txtSpråk.setText("");
    txtValuta.setText("");
    txtTidszon.setText("");
    txtPolitiskStruktur.setText("");
    txtEkonomi.setText("");
    
          //Detta är slutet på try-catch satsen och här fångas eventuella fel.
        } catch (Exception ettFel) {
        
        //Detta meddelande skrivs ut ifall ett problem uppstått.
        JOptionPane.showMessageDialog(this, "Fel: " + ettFel.getMessage());
        
        //Detta skriver även ut det i terminalen.
        ettFel.printStackTrace();
        }
        
        //Denna raden körs oavsett hur det går och dess uppgift är att fylla vår tabell i GUI med den nya datan.
        fyllLandITabell();
    }//GEN-LAST:event_btnLaggTillActionPerformed

    private void btnTaBortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaBortActionPerformed
        
        //Början på en try-catch sats och koden mellan dessa kommer nu testköras.
        try
        {
            
    //Här dyker en liten ruta upp efter man tryck på knappen "Ta bort" där man får välja vilket lid man vill ta bort.
    String landId = JOptionPane.showInputDialog(this, "Ange land-ID (lid) för att ta bort:");

    //Denna rad skrevs ifall användaren lämnar raden tom.
    if (landId == null || landId.isEmpty())
    {
        //Då syns detta felmeddelande.
        JOptionPane.showMessageDialog(this, "Fyll i ett land-ID först.");
        return;
    }

    //Här skapas en sql-fråga som hämtar namnet på landet med det angivna id:t.
    String sqlFraga = "SELECT namn FROM land WHERE lid = " + landId;

    //Här körs sedan frågan.
    ArrayList<HashMap<String, String>> landLista = idb.fetchRows(sqlFraga);

    //Om inget land hittas.
    if (landLista == null || landLista.isEmpty()) {
        
        //Då skrivs detta felmeddelande ut.
        JOptionPane.showMessageDialog(this, "Det finns inget land med detta ID.");
        return;
    }

    //Här skapas en array med namnet på specifikt land.
    String[] landNamnLista = new String[landLista.size()];
    
    //En for-loop körs.
    for (int i = 0; i < landLista.size(); i++) {
        
        //Här hämtas namnet ut.
        landNamnLista[i] = landLista.get(i).get("namn");
    }

    //Denna koden skapar en pop-up ruta som fungerar som enn bekräftelse
    //Där användaren får bekräfta borttagningen innan den sker.
    //Detta "JOptionPane.QUESTION_MESSAGE" är vilken typ av ruta som kommer upp.
    //landNamnLista är en lista med namn.
    //landNamnLista[0] är ett förvalt värde i listan.
    String valtLand = (String) JOptionPane.showInputDialog(
        this, "Bekräfta vilket land du vill ta bort:", "Ta bort land",
        JOptionPane.QUESTION_MESSAGE,
        null,
        landNamnLista,
        landNamnLista[0]
    );

    //Denna "if" besrkiver att om användaren valde ett land och tryckte på ok.
    if (valtLand != null) {
        
        //Här körs sen en for-each loop som går igenom landlistan.
        for (HashMap<String, String> l: landLista) {
            
            //Här hämtas namnet.
            String namn = l.get("namn");
            
            //OM namn är exakt samma som det valda landets namn.
            if (namn.equals(valtLand)) {
                
                //Då tas landet bort från databasen.
                String deleteSql = "DELETE FROM land WHERE lid = " + landId;
                
                //Här körs frågan.
                idb.delete(deleteSql);
                
                //Här skrivs meddelandet ut om borttagningen gick bra.
                JOptionPane.showMessageDialog(this, "Landet togs bort.");
                
                //Denna är viktig då den uppdaterar databasen med den nya datan UTAN det borttagna landet.
                fyllLandITabell();
                
                //Här avslutas loopen och allt är klart.
                break;
            }
        }
    }
    
  //Här fångas eventuella fel i "catch".
} catch (InfException ettFel) {
    
    //Vid fel så skrivs sedan detta felmeddelande ut.
    JOptionPane.showMessageDialog(this, "Fel vid borttagning av land: " + ettFel.getMessage());
}
    }//GEN-LAST:event_btnTaBortActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LbKosmetiskt;
    private javax.swing.JButton btnLaggTill;
    private javax.swing.JButton btnSpara;
    private javax.swing.JButton btnTaBort;
    private javax.swing.JButton btnTillbakaAdmin;
    private javax.swing.JLabel jLabelEkonomi;
    private javax.swing.JLabel jLabelLand;
    private javax.swing.JLabel jLabelNamn;
    private javax.swing.JLabel jLabelPolitiskStruktur;
    private javax.swing.JLabel jLabelSprak;
    private javax.swing.JLabel jLabelTidszon;
    private javax.swing.JLabel jLabelValuta;
    private javax.swing.JScrollPane jScrollPanelLand;
    private javax.swing.JTable jTableLand;
    private javax.swing.JTextField txtEkonomi;
    private javax.swing.JTextField txtNamn;
    private javax.swing.JTextField txtPolitiskStruktur;
    private javax.swing.JTextField txtSpråk;
    private javax.swing.JTextField txtTidszon;
    private javax.swing.JTextField txtValuta;
    // End of variables declaration//GEN-END:variables
}
