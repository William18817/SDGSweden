/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package sdgsweden.admin;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;
import sdgsweden.MainFrame;
import sdgsweden.Validering;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class AdminAvdelning extends javax.swing.JPanel {

    private MainFrame parent;
    private InfDB idb;
    private String aid;
    
    /**
     * Creates new form AdminAvdelning
     */
    public AdminAvdelning(MainFrame parent, InfDB idb,String aid) {
        this.parent = parent;
        this.idb = idb;
        this.aid = aid;
       
       
        initComponents();
        fyllAvdelningarITabell();
        
        //Den här raden lägger till en "Lyssnare" till tabellen "Avdelningar".
        //Varje gång användaren markerar en avdelnings så körs koden inuti "e -> {...}"
        jTableAvdelningar.getSelectionModel().addListSelectionListener(e -> {
            
            //Detta är en if-sats som kontrollerar att koden bara körs när användaren har avslutat sin radmarkering.
            if (!e.getValueIsAdjusting()) {
                
        //Här hämtas radnummer för den rad som användaren klickat på.
        //rad är av datatypen "int" vilket innebär att resultatet visar siffor.
        int rad = jTableAvdelningar.getSelectedRow();
        
        //Om en rad inte är vald kommer kommer "-1" att "visas". Om en rad är ifylld som kommer koden här nedan att visas i textfälten.
        if (rad != -1) {
            
            //Dessa kodrader hämtar värden från varje kolumn i "jTableAvdelning". 
            //Den informationen visas sen i respektive textält till höger, exempelvis "txtAdress" - textfältet. 
            txtNamn.setText(jTableAvdelningar.getValueAt(rad, 1).toString());
            txtBeskrivning.setText(jTableAvdelningar.getValueAt(rad, 2).toString());
            txtAdress.setText(jTableAvdelningar.getValueAt(rad, 3).toString());
            txtEpost.setText(jTableAvdelningar.getValueAt(rad, 4).toString());
            txtTelefon.setText(jTableAvdelningar.getValueAt(rad, 5).toString());
            txtStad.setText(jTableAvdelningar.getValueAt(rad, 6).toString());
            txtChef.setText(jTableAvdelningar.getValueAt(rad, 7).toString());
        }
    }
});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnTillbakaAdmin = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAvdelningar = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtNamn = new javax.swing.JTextField();
        txtAdress = new javax.swing.JTextField();
        txtEpost = new javax.swing.JTextField();
        txtBeskrivning = new javax.swing.JTextField();
        txtTelefon = new javax.swing.JTextField();
        btnLaggTill = new javax.swing.JButton();
        btnSpara = new javax.swing.JButton();
        btnTaBort = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtChef = new javax.swing.JTextField();
        txtStad = new javax.swing.JTextField();

        jLabel1.setText("Avdelning");

        btnTillbakaAdmin.setText("Tillbaka");
        btnTillbakaAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTillbakaAdminActionPerformed(evt);
            }
        });

        jTableAvdelningar.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(jTableAvdelningar);
        jTableAvdelningar.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel2.setText("Namn");

        jLabel3.setText("Adress");

        jLabel4.setText("E-post");

        jLabel5.setText("Telefon");

        jLabel6.setText("Beskrivning");

        txtNamn.setPreferredSize(new java.awt.Dimension(220, 24));

        txtAdress.setPreferredSize(new java.awt.Dimension(150, 24));

        txtEpost.setPreferredSize(new java.awt.Dimension(150, 24));

        txtBeskrivning.setPreferredSize(new java.awt.Dimension(150, 24));

        txtTelefon.setPreferredSize(new java.awt.Dimension(150, 24));

        btnLaggTill.setText("Lägg till");
        btnLaggTill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaggTillActionPerformed(evt);
            }
        });

        btnSpara.setText("Spara");
        btnSpara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSparaActionPerformed(evt);
            }
        });

        btnTaBort.setText("Ta bort");
        btnTaBort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaBortActionPerformed(evt);
            }
        });

        jLabel7.setText("Chef");

        jLabel8.setText("Stad");

        txtChef.setPreferredSize(new java.awt.Dimension(150, 24));

        txtStad.setPreferredSize(new java.awt.Dimension(150, 24));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel2)
                                                .addComponent(jLabel3)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(1, 1, 1)
                                                .addComponent(jLabel5))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel6)))
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtNamn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtAdress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtEpost, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtTelefon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtBeskrivning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addGap(50, 50, 50)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtStad, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtChef, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 764, Short.MAX_VALUE)
                        .addComponent(btnSpara)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLaggTill)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTaBort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTillbakaAdmin)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAdress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEpost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(txtBeskrivning, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtChef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtStad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSpara)
                        .addComponent(btnLaggTill)
                        .addComponent(btnTaBort))
                    .addComponent(btnTillbakaAdmin))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    //Detta är en metod som inte returnerar något, utan dess syfte är att fylla tabellen "jTableAvdelningar" med information från databasen.
    private void fyllAvdelningarITabell() {
     
    //Början på en try-catch sats vars syfte är att försöka köra specifik kod, och vid eventuella fel fångar "Catch" det.
    try {
        
        //Detta är en vanlig sql-fråga vars syfte är att hämta all information från avdelning.
        String sqlFraga = "SELECT * FROM avdelning";
        
        //ArrayList och HashMap används här för att spara information i listor.
        //Dessa behöver importeras (Se högst upp) för att kunna användas.
        //Sedan körs sql-frågan via vår databasanslutning "idb".
        ArrayList<HashMap<String, String>> resultat = idb.fetchRows(sqlFraga);

        //Detta är en Array (String[]) med "Kolumner" som variabelnamn.
        //Det är dessa kolumner som vi vill visa i vår tabell.
        String[] kolumner = {"avdid", "namn", "beskrivning", "adress", "epost", "telefon", "stad", "chef"};
        
        //Denna raden skapar ett tomt tabellmodell-objekt som våra kolumner och rader ligger i i "jTableAvdelningar".
        DefaultTableModel modell = new DefaultTableModel();

        //Detta är en for-each loop som går igenom varje kolumnnamn och lägger till det som en kolumn i vår modell.
        for (String kolumn: kolumner) {
            modell.addColumn(kolumn);
        }

        //Detta är också en for-each loop som går igenom varje rad frå databasen.
        for (HashMap<String, String> rad : resultat) {
            
            //"String[] radensVarden" är en array som skapar lika många fält som kolumner för att kunna spara alla värden.
            String[] radensVarden = new String[kolumner.length];
            
            //Detta är en for-loop som går igenom varje rad i varje kolumn.
            for (int i = 0; i < kolumner.length; i++) {
                
                //Här hämtas rätt värde från "rad" genom "rad.get(kolumner[i])".
                //Informationen sparad sedan i arrayen "radensVarden".
                radensVarden[i] = rad.get(kolumner[i]);
            }
            
            //Detta är en "add" där vi lägger till varje rad i modellen efter vi fått in alla värden.
            modell.addRow(radensVarden);
        }

        //Här kopplas modellen till vår tabell "jTabelAvdelningar" vilket gör att användaren visuellt kan se den.
        jTableAvdelningar.setModel(modell);
        
      //Slutet på try-catch satsen där vi i detta skede fångar eventuella fel som finns i koden mellan try och catch.
      //Felet "lagras" i variabeln vi döpt till "ettFel".
    } catch (Exception ettFel) {
        
        //Här visas det ett felmeddelande i en pop-up ruta med nedan angivna felmeddelande.
        JOptionPane.showMessageDialog(this, "Kunde inte visa avdelningar.");
        
        //Detta skriver ut felet i konsolen.
        ettFel.printStackTrace();
    }
}
    //En metod som körs när vi trycker på "Tillbaka" knappen.
    private void btnTillbakaAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTillbakaAdminActionPerformed
        
        //Här skapas ett nytt objekt av "AdminPanel" i form av att ett nytt GUI-panel_fönster dyker upp.
        //Den får med sig tre saker från konstruktorn i form av "Parent (MainFrame), idb (databaskopplingen) och aid (användarens id).
        AdminPanel adminPanel = new AdminPanel (parent, idb, aid);
        
        //Detta är ett metodanrop vars syfte är att visa "adminPanel".
        parent.visaPanel(adminPanel, "adminPanel");
    }//GEN-LAST:event_btnTillbakaAdminActionPerformed

    private void btnSparaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSparaActionPerformed
        
        //Dessa "if;s" nedan är en validering där det ställs olika krav på de attibut som står angivna.
        //Exempelvis om man anger fel format på e-post så får man felmeddelandet "Ogitlig E-postadress".
        //Allt detta är sedan kopplat till en egen valideringsklass som importers (Se högst upp).
        if (Validering.isEmpty(txtNamn.getText()))
        {
           JOptionPane.showMessageDialog(this, "Namn får inte tomt.");
           return;
        }
        if (Validering.isEmpty(txtAdress.getText()))
        {
            JOptionPane.showMessageDialog(this, "Ogiltig adress.");
            return;
        }
        if (Validering.isEmpty(txtEpost.getText()))
        {
            JOptionPane.showMessageDialog(this, "Ogiltig E-postadress.");
            return;
        }
        if (Validering.isEmpty(txtTelefon.getText()))
        {
            JOptionPane.showMessageDialog(this, "Ogiltigt telefonnummer.");
            return;
        }
        if (Validering.isEmpty(txtBeskrivning.getText()))
        {
            JOptionPane.showMessageDialog(this, "Beskrivning får inte vara tomt.");
            return;
        }
        if (Validering.isEmpty(txtChef.getText()))
        {
            JOptionPane.showMessageDialog(this, "Chef får inte vara tomt.");
            return;
        }
        if (Validering.isEmpty(txtStad.getText()))
        {
            JOptionPane.showMessageDialog(this, "Stad får inte vara tomt.");
            return;
        }
        
    //Detta hämtar den rad som är markerad i tabellen "jTableAvdelningar".
    int valdRad = jTableAvdelningar.getSelectedRow();
    
    //Om inget är valt, alltså om -1 returneras...
    if (valdRad == -1) {
        
        //... så visas detta meddelande.
        JOptionPane.showMessageDialog(this, "Du måste klicka på en rad i tabellen först.");
        return;
    }

    //Här blir alla fält inlästa och "trim()" kontrollerar och tar bort mellanslag i kodraden.
    String namn = txtNamn.getText().trim();
    String adress = txtAdress.getText().trim();
    String epost = txtEpost.getText().trim();
    String telefon = txtTelefon.getText().trim();
    String beskrivning = txtBeskrivning.getText().trim();
    String chef = txtChef.getText().trim();
    String stad = txtStad.getText().trim();
    
    //Början på en try-catch sats.
    try {
        
        //Här hämtar vi avdid från kolumn 0 på vald rad.
        String avdid = jTableAvdelningar.getValueAt(valdRad, 0).toString();

        //Här skapas en sql-fråga (sqlFraga) som uppdaterar informationen i databasen för specifikt valt avdid.
        String sqlFraga = "UPDATE avdelning SET namn = '" + namn + "', adress = '" + adress + "', epost = '" + epost + "', telefon = '" + telefon + "', beskrivning = '" + beskrivning + "', chef = " + chef + ", stad = " + stad + " WHERE avdid = " + avdid;

        //Här körs frågan så att uppdateringen implementeras i databasen.
        idb.update(sqlFraga);

        //Här visas ett meddelande om hur uppdateringen gick.
        JOptionPane.showMessageDialog(this, "Ändring sparad!");

        //Dessa kodrader tömmer varje textfält efter att ädnringen har skett för att underlätta inför nästa gång man ska skriva in något.
        txtNamn.setText("");
        txtAdress.setText("");
        txtEpost.setText("");
        txtTelefon.setText("");
        txtBeskrivning.setText("");
        txtChef.setText("");
        txtStad.setText("");

        //Här sker ett internt metodanrop för att hämta den nya datan.
        fyllAvdelningarITabell();

      //Detta är slutet på try-catch satsen. Om något går fel så fångar catch det här.
    } catch (Exception ettFel) {
        
        //Följande meddelande skrivs ut vid fel.
        JOptionPane.showMessageDialog(this, "Något gick fel: " + ettFel.getMessage());
        
        //printStackTrace skriver ut felet i terminalen för att kunna felsöka.
        ettFel.printStackTrace();
    }
        
    }//GEN-LAST:event_btnSparaActionPerformed

    private void btnLaggTillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaggTillActionPerformed
        
        //Början på en try-catch sats. All kod mellan try och catch kommer nu att testköras.
        try {
            
    //Här hämtas alla värden från textfälten där "trim()" tar bort mellanslag i varje kodrad.
    String namn = txtNamn.getText().trim();
    String adress = txtAdress.getText().trim();
    String epost = txtEpost.getText().trim();
    String telefon = txtTelefon.getText().trim();
    String beskrivning = txtBeskrivning.getText().trim();
    String chefStr = txtChef.getText().trim();
    String stadStr = txtStad.getText().trim();

    //Dessa "if;s" nedan är en validering där det ställs olika krav på de attibut som står angivna.
    //Exempelvis om man anger fel format på e-post så får man felmeddelandet "Ogitlig E-postadress".
    //Allt detta är sedan kopplat till en egen valideringsklass som importers (Se högst upp).
    if (Validering.isEmpty(txtNamn.getText())) {
        JOptionPane.showMessageDialog(this, "Namn får inte vara tomt.");
        return;
    }
    if (Validering.isEmpty(txtAdress.getText())) {
        JOptionPane.showMessageDialog(this, "Adress får inte vara tomt.");
        return;
    }
    if (Validering.isEmpty(txtEpost.getText())) {
        JOptionPane.showMessageDialog(this, "Ogiltig E-postadress.");
        return;
    }
    if (Validering.isEmpty(txtTelefon.getText())) {
        JOptionPane.showMessageDialog(this, "Ogiltigt telefonnummer.");
        return;
    }
    if (Validering.isEmpty(txtBeskrivning.getText())) {
        JOptionPane.showMessageDialog(this, "Beskrivning får inte vara tom.");
        return;
    }
    if (Validering.isEmpty(txtChef.getText())) {
        JOptionPane.showMessageDialog(this, "Chef (ID) får inte vara tomt.");
        return;
    }
    if (Validering.isEmpty(txtStad.getText())) {
        JOptionPane.showMessageDialog(this, "Stad (ID) får inte vara tomt.");
        return;
    }

    //Här sker en konvertering där "chef" och "stad" görs om till helttal (int).
    int chef = Integer.parseInt(chefStr);
    int stad = Integer.parseInt(stadStr);
   

        //Här ställs en sql-fråga där vi vill hämta "aid" från anställd.
        String sqlChef = "SELECT aid FROM anstalld WHERE aid = " + chef;
        
        //Om inget resultat hittas, Om resultat är exakt icke-existerande (==) så returneras nedan meddelande.
        String chefResultat = idb.fetchSingle(sqlChef);
        if (chefResultat == null) {
            JOptionPane.showMessageDialog(this, "Chef-ID finns inte.");
            return;
        }

        //Här ställs en sql-fråga där vi vill hämta "sid" från stad.
        String sqlStad = "SELECT sid FROM stad WHERE sid = " + stad;
        
        //Om inget resultat hittas, Om resultat är exakt icke-existerande (==) så returneras nedan meddelande.
        String stadResultat = idb.fetchSingle(sqlStad);
        if (stadResultat == null) {
            JOptionPane.showMessageDialog(this, "Stad-ID finns inte.");
            return;
        }

        //Här hämtas det högsta avdid som existerar för stunden och lägger till + 1.
        String sqlNextId = "SELECT MAX(avdid) FROM avdelning";
        String nextIdStr = idb.fetchSingle(sqlNextId);
      
        //Om inga avdelningar finns så vill vi starta på 1.
        int nextAvdid = 1;
        if (nextIdStr != null && !nextIdStr.isEmpty()) {
            nextAvdid = Integer.parseInt(nextIdStr) + 1;
        }

        //Här skapas en sql-fråga där vi vill inserta (lägga till en ny rad) i avdelningstabellen.
        String sqlFraga = "INSERT INTO avdelning (avdid, namn, adress, epost, telefon, beskrivning, chef, stad) " +
                     "VALUES (" + nextAvdid + ", '" + namn + "', '" + adress + "', '" + epost + "', '" + telefon + "', '" + beskrivning + "', " + chef + ", " + stad + ")";

    //Här körs sql frågan.
    idb.insert(sqlFraga);

    //Detta skrivs ut ifall vi lyckats med att lägga till en avdelning.
    JOptionPane.showMessageDialog(this, "Avdelning har lagts till i systemet!");

    //Dessa kodrader tömmer varje textfält efter att ädnringen har skett
    //för att underlätta inför nästa gång man ska skriva in något.
    txtNamn.setText("");
    txtAdress.setText("");
    txtEpost.setText("");
    txtTelefon.setText("");
    txtBeskrivning.setText("");
    txtChef.setText("");
    txtStad.setText("");
        }
        
        //Detta är slutet på try-catch satsen och här fångas eventuella fel.
        catch (Exception ettFel)
        {
            
            //Här skrivs följande felmeddelande ut vid fel som fångats i "catch".
            JOptionPane.showMessageDialog(this, "Fel: " + ettFel.getMessage());
            
            //Här skrivs felmeddelandet ut i terminalen.
            ettFel.printStackTrace();
        }
        
        //Här uppdateras tabellen så den nya avdelningen syns.
        fyllAvdelningarITabell();
    }//GEN-LAST:event_btnLaggTillActionPerformed

    private void btnTaBortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaBortActionPerformed
        try
{
    // Detta visar en popup-ruta där man får ange avdelnings-ID.
    String avdelningsId = JOptionPane.showInputDialog(this, "Ange avdelnings-ID (avdid) för att ta bort:");

    // Om man inte fyller i rutan med ett giltigt avdid.
    if (avdelningsId == null || avdelningsId.isEmpty())
    {
        //Detta skrivs ut ifall ett ogiltigt avdelnings-id anges.
        JOptionPane.showMessageDialog(this, "Fyll i ett avdelnings-ID först.");
        return;
    }

    // Här hämtar vi genom en sql-fråga namn på avdelning genom att ange specifikt avdid.
    String sqlFraga = "SELECT namn FROM avdelning WHERE avdid = " + avdelningsId;

    //Här kör vi sql-frågan.
    ArrayList<HashMap<String, String>> avdelningar = idb.fetchRows(sqlFraga);

    // Om ingen avdelning hittas...
    if (avdelningar == null || avdelningar.isEmpty()) {
        
        //...Så kommer följande felmeddelande att visas.
        JOptionPane.showMessageDialog(this, "Det finns ingen avdelning med detta ID.");
        return;
    }

    //Här skapas en array med namnen på samtliga avdelningar.
    String[] avdelningsNamnLista = new String[avdelningar.size()];
    
    //En for-loop körs och går igenom alla avdelningar.
    for (int i = 0; i < avdelningar.size(); i++) {
        
        //Här hämtar vi index och namn på avdelningarna från arrayen "avdelningsNamnLista".
        avdelningsNamnLista[i] = avdelningar.get(i).get("namn");
    }

    //Här visas en popup-ruta genom "JOptionPane.QUESTION_MESSAGE" där man måste bekräfta vilken avdelning man vill ta bort.
    String valdAvdelning = (String) JOptionPane.showInputDialog(
        this, "Bekräfta vilken avdelning du vill ta bort:", "Ta bort avdelning",
        JOptionPane.QUESTION_MESSAGE,
        null,
        
        //Detta är lista med alternativ att välja mellan.
        avdelningsNamnLista,
        
        //Detta är standardvalet som är förvalt inför varje gång rutan öppnas.
        avdelningsNamnLista[0]
    );

    //Om användaren inte har tryckt avbryt.
    if (valdAvdelning != null) {
        
        //Då kör den en for-each loop där den går igenom resultatet från databasen
        //Och jämför det med det som anvöndaren matade in.
        for (HashMap<String, String> a: avdelningar) {
            String namn = a.get("namn");
            
            //Om namnet på avdelningen stämmer överens med vad som matades in.
            if (namn.equals(valdAvdelning)) {
                
                //Så körs denna sql-fråga vars syfte är att ta bort avdelningen från databasen.
                String deleteSql = "DELETE FROM avdelning WHERE avdid = " + avdelningsId;
                
                //Här körs frågan.
                idb.delete(deleteSql);
                
                //Detta skrivs ut efter att borttagningen utförts.
                JOptionPane.showMessageDialog(this, "Avdelningen togs bort.");
                fyllAvdelningarITabell();
                
                //Detta avslutar loopen och därmed metoden.
                break;
            }
        }
    }
    
  //Här fångas eventuella fel.
} catch (InfException ettFel) {
    
    //Detta är det som skrivs ut vid ett fel av borttagningen av en avdelning.
    JOptionPane.showMessageDialog(this, "Fel vid borttagning av avdelning: " + ettFel.getMessage());
}
    }//GEN-LAST:event_btnTaBortActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLaggTill;
    private javax.swing.JButton btnSpara;
    private javax.swing.JButton btnTaBort;
    private javax.swing.JButton btnTillbakaAdmin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableAvdelningar;
    private javax.swing.JTextField txtAdress;
    private javax.swing.JTextField txtBeskrivning;
    private javax.swing.JTextField txtChef;
    private javax.swing.JTextField txtEpost;
    private javax.swing.JTextField txtNamn;
    private javax.swing.JTextField txtStad;
    private javax.swing.JTextField txtTelefon;
    // End of variables declaration//GEN-END:variables
}
