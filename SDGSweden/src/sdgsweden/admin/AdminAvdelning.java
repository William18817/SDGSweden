/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package sdgsweden.admin;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;
import sdgsweden.MainFrame;
import sdgsweden.Validering;

/**
 *
 * @author User
 */
public class AdminAvdelning extends javax.swing.JPanel {

    private MainFrame parent;
    private InfDB idb;
    private String aid;
    
    

    /**
     * Creates new form AdminAvdelning
     */
    public AdminAvdelning(MainFrame parent, InfDB idb,String aid) {
        this.parent = parent;
        this.idb = idb;
        this.aid = aid;
       
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnTillbakaAdmin = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtNamn = new javax.swing.JTextField();
        txtAdress = new javax.swing.JTextField();
        txtEpost = new javax.swing.JTextField();
        txtBeskrivning = new javax.swing.JTextField();
        txtTelefon = new javax.swing.JTextField();
        btnLaggTill = new javax.swing.JButton();
        btnSpara = new javax.swing.JButton();
        btnTaBort = new javax.swing.JButton();
        chkRedigeraInformation = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtChef = new javax.swing.JTextField();
        txtStad = new javax.swing.JTextField();

        jLabel1.setText("Avdelning");

        btnTillbakaAdmin.setText("Tillbaka");
        btnTillbakaAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTillbakaAdminActionPerformed(evt);
            }
        });

        jTable1.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel2.setText("Namn");

        jLabel3.setText("Adress");

        jLabel4.setText("E-post");

        jLabel5.setText("Telefon");

        jLabel6.setText("Beskrivning");

        txtNamn.setPreferredSize(new java.awt.Dimension(150, 24));

        txtAdress.setPreferredSize(new java.awt.Dimension(150, 24));

        txtEpost.setPreferredSize(new java.awt.Dimension(150, 24));

        txtBeskrivning.setPreferredSize(new java.awt.Dimension(150, 24));

        txtTelefon.setPreferredSize(new java.awt.Dimension(150, 24));

        btnLaggTill.setText("LÃ¤gg till");
        btnLaggTill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaggTillActionPerformed(evt);
            }
        });

        btnSpara.setText("Spara");
        btnSpara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSparaActionPerformed(evt);
            }
        });

        btnTaBort.setText("Ta bort");
        btnTaBort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaBortActionPerformed(evt);
            }
        });

        chkRedigeraInformation.setText("Redigera uppgifter");

        jLabel7.setText("Chef");

        jLabel8.setText("Stad");

        txtChef.setPreferredSize(new java.awt.Dimension(150, 24));

        txtStad.setPreferredSize(new java.awt.Dimension(150, 24));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnTillbakaAdmin)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnSpara)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnLaggTill)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnTaBort)
                                .addGap(26, 26, 26)
                                .addComponent(chkRedigeraInformation))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel8))))
                                .addGap(174, 174, 174)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtAdress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEpost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtBeskrivning, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtChef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtStad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAdress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEpost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBeskrivning, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtChef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtStad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSpara)
                    .addComponent(btnLaggTill)
                    .addComponent(btnTaBort)
                    .addComponent(chkRedigeraInformation))
                .addGap(62, 62, 62)
                .addComponent(btnTillbakaAdmin)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnTillbakaAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTillbakaAdminActionPerformed
        AdminPanel adminPanel = new AdminPanel (parent, idb, aid);
        parent.visaPanel(adminPanel, "adminPanel");
    }//GEN-LAST:event_btnTillbakaAdminActionPerformed

    private void btnSparaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSparaActionPerformed
        if (Validering.isEmpty(txtNamn.getText()))
        {
           JOptionPane.showMessageDialog(this, "Namn fÃ¥r inte tomt.");
           return;
        }
        if (Validering.isEmpty(txtAdress.getText()))
        {
            JOptionPane.showMessageDialog(this, "Ogiltig adress.");
            return;
        }
        if (Validering.isEmpty(txtEpost.getText()))
        {
            JOptionPane.showMessageDialog(this, "Ogiltig E-postadress.");
            return;
        }
        if (Validering.isEmpty(txtTelefon.getText()))
        {
            JOptionPane.showMessageDialog(this, "Ogiltigt telefonnummer.");
            return;
        }
        if (Validering.isEmpty(txtBeskrivning.getText()))
        {
            JOptionPane.showMessageDialog(this, "Beskrivning fÃ¥r inte vara tomt.");
            return;
        }
        if (Validering.isEmpty(txtChef.getText()))
        {
            JOptionPane.showMessageDialog(this, "Chef fÃ¥r inte vara tomt.");
            return;
        }
        if (Validering.isEmpty(txtStad.getText()))
        {
            JOptionPane.showMessageDialog(this, "Stad fÃ¥r inte vara tomt.");
            return;
        }
    }//GEN-LAST:event_btnSparaActionPerformed

    private void btnLaggTillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaggTillActionPerformed
        try {
    // HÃ¤mta alla vÃ¤rden frÃ¥n formulÃ¤ret
    String namn = txtNamn.getText().trim();
    String adress = txtAdress.getText().trim();
    String epost = txtEpost.getText().trim();
    String telefon = txtTelefon.getText().trim();
    String beskrivning = txtBeskrivning.getText().trim();
    String chefStr = txtChef.getText().trim();
    String stadStr = txtStad.getText().trim();

    if (Validering.isEmpty(txtNamn.getText())) {
        JOptionPane.showMessageDialog(this, "Namn fÃ¥r inte vara tomt.");
        return;
    }
    if (Validering.isEmpty(txtAdress.getText())) {
        JOptionPane.showMessageDialog(this, "Adress fÃ¥r inte vara tomt.");
        return;
    }
    if (Validering.isEmpty(txtEpost.getText())) {
        JOptionPane.showMessageDialog(this, "Ogiltig E-postadress.");
        return;
    }
    if (Validering.isEmpty(txtTelefon.getText())) {
        JOptionPane.showMessageDialog(this, "Ogiltigt telefonnummer.");
        return;
    }
    if (Validering.isEmpty(txtBeskrivning.getText())) {
        JOptionPane.showMessageDialog(this, "Beskrivning fÃ¥r inte vara tom.");
        return;
    }
    if (Validering.isEmpty(txtChef.getText())) {
        JOptionPane.showMessageDialog(this, "Chef (ID) fÃ¥r inte vara tomt.");
        return;
    }
    if (Validering.isEmpty(txtStad.getText())) {
        JOptionPane.showMessageDialog(this, "Stad (ID) fÃ¥r inte vara tomt.");
        return;
    }

    // Konvertera chef/stad till int
    int chef = Integer.parseInt(chefStr);
    int stad = Integer.parseInt(stadStr);

    // HÃ¤mta nÃ¤sta lediga avdid
    String sqlNextId = "SELECT MAX(avdid) + 1 FROM avdelning";
    String nextIdStr = idb.fetchSingle(sqlNextId);
    if (nextIdStr == null) {
        nextIdStr = "1";
    }
    int nextAvdid = Integer.parseInt(nextIdStr);

    // Skapa INSERT-frÃ¥ga
    String sql = "INSERT INTO avdelning (avdid, namn, adress, epost, telefon, beskrivning, chef, stad) "
               + "VALUES (" + nextAvdid + ", "
               + "'" + namn + "', "
               + "'" + adress + "', "
               + "'" + epost + "', "
               + "'" + telefon + "', "
               + "'" + beskrivning + "', "
               + chef + ", "
               + stad + ")";

    // KÃ¶r INSERT
    idb.insert(sql);

    JOptionPane.showMessageDialog(this, "Avdelning har lagts till i systemet!");

    // Rensa fÃ¤lt
    txtNamn.setText("");
    txtAdress.setText("");
    txtEpost.setText("");
    txtTelefon.setText("");
    txtBeskrivning.setText("");
    txtChef.setText("");
    txtStad.setText("");
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, "Fel: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnLaggTillActionPerformed

    private void btnTaBortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaBortActionPerformed
        try
{
    // Detta visar en popup-ruta dÃ¤r man fÃ¥r ange avdelnings-ID
    String avdelningsId = JOptionPane.showInputDialog(this, "Ange avdelnings-ID (avdid) fÃ¶r att ta bort:");

    // Om man inte fyller i rutan med ett giltigt avdid
    if (avdelningsId.isEmpty())
    {
        JOptionPane.showMessageDialog(this, "Fyll i ett avdelnings-ID fÃ¶rst.");
        return;
    }

    // HÃ¤mta specifik information om avdelningen
    String sql = "SELECT namn FROM avdelning WHERE avdid = " + avdelningsId;

    // KÃ¶r SQL-frÃ¥gan
    ArrayList<HashMap<String, String>> avdelningar = idb.fetchRows(sql);

    // Om ingen avdelning hittas
    if (avdelningar == null || avdelningar.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Det finns ingen avdelning med detta ID.");
        return;
    }

    // Lista namn (Ã¤ven om det bara Ã¤r en)
    String[] avdelningsNamnLista = new String[avdelningar.size()];
    for (int i = 0; i < avdelningar.size(); i++) {
        avdelningsNamnLista[i] = avdelningar.get(i).get("namn");
    }

    // Dialog fÃ¶r att bekrÃ¤fta borttagning
    String valdAvdelning = (String) JOptionPane.showInputDialog(
        this,
        "BekrÃ¤fta vilken avdelning du vill ta bort:",
        "Ta bort avdelning",
        JOptionPane.QUESTION_MESSAGE,
        null,
        avdelningsNamnLista,
        avdelningsNamnLista[0]
    );

    if (valdAvdelning != null) {
        for (HashMap<String, String> a : avdelningar) {
            String namn = a.get("namn");
            if (namn.equals(valdAvdelning)) {
                String deleteSql = "DELETE FROM avdelning WHERE avdid = " + avdelningsId;
                idb.delete(deleteSql);
                JOptionPane.showMessageDialog(this, "Avdelningen togs bort.");
                break;
            }
        }
    }
} catch (InfException e) {
    JOptionPane.showMessageDialog(this, "Fel vid borttagning av avdelning: " + e.getMessage());
}
    }//GEN-LAST:event_btnTaBortActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLaggTill;
    private javax.swing.JButton btnSpara;
    private javax.swing.JButton btnTaBort;
    private javax.swing.JButton btnTillbakaAdmin;
    private javax.swing.JCheckBox chkRedigeraInformation;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtAdress;
    private javax.swing.JTextField txtBeskrivning;
    private javax.swing.JTextField txtChef;
    private javax.swing.JTextField txtEpost;
    private javax.swing.JTextField txtNamn;
    private javax.swing.JTextField txtStad;
    private javax.swing.JTextField txtTelefon;
    // End of variables declaration//GEN-END:variables
}
