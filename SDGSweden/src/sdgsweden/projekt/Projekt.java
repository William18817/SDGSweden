/*
 * @author jonas
 */
package sdgsweden.projekt;

import java.awt.Container;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import oru.inf.InfDB;
import oru.inf.InfException;
import javax.swing.table.DefaultTableModel;




public class Projekt extends javax.swing.JPanel {

private InfDB idb;
//private String handlaggarId;

    
    public Projekt(InfDB idb) {
        this.idb = idb;
        //this.handlaggarId = handlaggarId;
        
        
        initComponents();
        hamtaAllaProjekt(); // Visa direkt (?)
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField3 = new javax.swing.JTextField();
        StatusMenu = new javax.swing.JComboBox<>();
        DateOne = new javax.swing.JTextField();
        DateTwo = new javax.swing.JTextField();
        DatumLabel = new javax.swing.JLabel();
        UppdateButton = new javax.swing.JButton();
        StatusLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        InfoProjectTable = new javax.swing.JTable();
        AndraUppgifter = new javax.swing.JButton();
        AddButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        AddButton1 = new javax.swing.JButton();
        pidTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        jTextField3.setText("jTextField3");

        setToolTipText("");

        StatusMenu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Alla", "Pågående", "Planerat", "Avslutat" }));
        StatusMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatusMenuActionPerformed(evt);
            }
        });

        DateOne.setColumns(12);

        DateTwo.setColumns(12);

        DatumLabel.setText("Sök datum");

        UppdateButton.setText("Filtrera");
        UppdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UppdateButtonActionPerformed(evt);
            }
        });

        StatusLabel.setText("Status");

        InfoProjectTable.setBackground(new java.awt.Color(204, 204, 204));
        InfoProjectTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Pid", "Status", "Projektnamn", "Beskrivning", "Startdatum", "Slutdatum", "Kostnad", "Prioritet"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        InfoProjectTable.setToolTipText("");
        jScrollPane1.setViewportView(InfoProjectTable);

        AndraUppgifter.setText("Ändra Uppgifter");
        AndraUppgifter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AndraUppgifterActionPerformed(evt);
            }
        });

        AddButton.setText("Lägg till");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Ta bort");

        AddButton1.setText("Total kostnad");
        AddButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButton1ActionPerformed(evt);
            }
        });

        pidTextField.setColumns(2);

        jLabel1.setText("Pid");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(StatusMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(StatusLabel)
                                        .addGap(80, 80, 80)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DatumLabel)
                                    .addComponent(DateOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DateTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UppdateButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(AndraUppgifter, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pidTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DatumLabel)
                    .addComponent(StatusLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StatusMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DateOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DateTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UppdateButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddButton)
                    .addComponent(AndraUppgifter)
                    .addComponent(pidTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeleteButton)
                    .addComponent(AddButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void hamtaAllaProjekt() {
    

        
        try {
        String fraga = 
            "SELECT pid, status, projektnamn, beskrivning, startdatum, slutdatum, kostnad, prioritet " +
            "FROM projekt ";
            //"JOIN anstalld a ON p.projektchef = a.aid " +
            //"WHERE a.aid = " + handlaggarId;
            
            ArrayList<HashMap <String, String>> resultat = idb.fetchRows(fraga);
            
            DefaultTableModel model = (DefaultTableModel) InfoProjectTable.getModel();


        
        
        model.setRowCount(0);
            for(HashMap<String, String> rad : resultat){
                       model.addRow(new Object[]{
                       rad.get("pid"),
                       rad.get("status"),
                       rad.get("projektnamn"),
                       rad.get("beskrivning"),
                       rad.get("startdatum"),
                       rad.get("slutdatum"),
                       rad.get("kostnad"),
                       rad.get("prioritet"),
                       }); 
        
                
            }
        }
        catch (InfException e) {
        JOptionPane.showMessageDialog(this, "Kunde inte hämta projekt: " + e.getMessage());

     
    }
}

    
    
    private void StatusMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatusMenuActionPerformed
        String valdStatus = StatusMenu.getSelectedItem().toString();
        
       
        
        try{
            String sql;
            
            if (valdStatus.equals("Alla")){
            sql = "SELECT pid, status, projektnamn, beskrivning, startdatum, slutdatum, kostnad, prioritet "
                    + "FROM projekt ";
                    }
            else{
                sql = "SELECT pid, status, projektnamn, beskrivning, startdatum, slutdatum, kostnad, prioritet "
                    + "FROM projekt "
                    + "WHERE status = '" + valdStatus + "'";}
            
                    ArrayList<HashMap<String, String>> resultat = idb.fetchRows(sql);
                    
                    DefaultTableModel model = (DefaultTableModel) InfoProjectTable.getModel();
                    
                    model.setRowCount(0);
                    
                    for(HashMap<String, String> rad : resultat){
                       model.addRow(new Object[]{
                       rad.get("pid"),
                       rad.get("status"),
                       rad.get("projektnamn"),
                       rad.get("beskrivning"),
                       rad.get("startdatum"),
                       rad.get("slutdatum"),
                       rad.get("kostnad"),
                       rad.get("prioritet"),
                       }); 
                    }
                    
        }
        catch (Exception e){
        JOptionPane.showMessageDialog(null, "Fel vid hämtning: " + e.getMessage());
        }
    }//GEN-LAST:event_StatusMenuActionPerformed

    private void UppdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UppdateButtonActionPerformed
    String datumFran = DateOne.getText().trim();
    String datumTill = DateTwo.getText().trim();
    String valdStatus = StatusMenu.getSelectedItem().toString();

    if (datumFran.isEmpty() || datumTill.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Fyll i båda datumfälten.");
        return;
    }

    try {
        String sql = "SELECT pid, status, projektnamn, beskrivning, startdatum, slutdatum, kostnad, prioritet "
                   + "FROM projekt "
                   + "WHERE startdatum >= '" + datumFran + "' AND startdatum <= '" + datumTill + "'";

        // Lägg till statusfilter om det inte är "Alla"
        if (!valdStatus.equals("Alla")) {
            sql += " AND status = '" + valdStatus + "'";
        }

        ArrayList<HashMap<String, String>> resultat = idb.fetchRows(sql);
        DefaultTableModel model = (DefaultTableModel) InfoProjectTable.getModel();
        model.setRowCount(0);

        for (HashMap<String, String> rad : resultat) {
            model.addRow(new Object[]{
                rad.get("pid"),
                rad.get("status"),
                rad.get("projektnamn"),
                rad.get("beskrivning"),
                rad.get("startdatum"),
                rad.get("slutdatum"),
                rad.get("kostnad"),
                rad.get("prioritet"),
            });
        }
    } catch (InfException e) {
        JOptionPane.showMessageDialog(this, "Kunde inte filtrera projekt: " + e.getMessage());
    }
    }//GEN-LAST:event_UppdateButtonActionPerformed

    private void AndraUppgifterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AndraUppgifterActionPerformed
    try {
    
        int pid = Integer.parseInt(pidTextField.getText().trim());
        
        RedigeraProjekt redigeraPanel = new RedigeraProjekt(idb, pid, this);
        Container parent = this.getParent();
        
        parent.removeAll(); // Ta bort nuvarande innehåll i panelen
        parent.add(redigeraPanel);
        parent.revalidate();
        parent.repaint();
    }
    catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Ange ett giltigt heltal för Pid.", "Fel", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_AndraUppgifterActionPerformed

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddButtonActionPerformed

    private void AddButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton AddButton1;
    private javax.swing.JButton AndraUppgifter;
    private javax.swing.JTextField DateOne;
    private javax.swing.JTextField DateTwo;
    private javax.swing.JLabel DatumLabel;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JTable InfoProjectTable;
    private javax.swing.JLabel StatusLabel;
    private javax.swing.JComboBox<String> StatusMenu;
    private javax.swing.JButton UppdateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField pidTextField;
    // End of variables declaration//GEN-END:variables
}
    
